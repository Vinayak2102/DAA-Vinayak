// I
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <limits.h>

// Function to find the vertex with the minimum key value
int minKey(int* key, bool* mstSet, int vertices)
{
    int min = INT_MAX;
    int min_index;

    for (int v = 0; v < vertices; v++) {
        if (mstSet[v] == false && key[v] < min) {
            min = key[v];
            min_index = v;
        }
    }

    return min_index;
}

// Function to calculate the minimum spanning weight using Prim's algorithm
int calculateMinimumWeight(int** graph, int vertices)
{
    int* parent = (int*)malloc(vertices * sizeof(int));
    int* key = (int*)malloc(vertices * sizeof(int));
    bool* mstSet = (bool*)malloc(vertices * sizeof(bool));

    // Initialize all keys as infinite and mstSet[] as false
    for (int i = 0; i < vertices; i++) {
        key[i] = INT_MAX;
        mstSet[i] = false;
    }

    // The first vertex is always the root
    key[0] = 0;
    parent[0] = -1; // First node is always the root of MST

    // Construct the MST with (vertices - 1) edges
    for (int count = 0; count < vertices - 1; count++) {
        int u = minKey(key, mstSet, vertices);
        mstSet[u] = true;

        // Update key values and parent index of the adjacent vertices
        for (int v = 0; v < vertices; v++) {
            if (graph[u][v] && mstSet[v] == false && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    // Calculate the minimum spanning weight
    int weight = 0;
    for (int i = 1; i < vertices; i++) {
        weight += graph[i][parent[i]];
    }

    // Cleanup
    free(parent);
    free(key);
    free(mstSet);

    return weight;
}

int main()
{
    int vertices;
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &vertices);

    // Dynamically allocate memory for the graph
    int** graph = (int**)malloc(vertices * sizeof(int*));
    for (int i = 0; i < vertices; i++) {
        graph[i] = (int*)malloc(vertices * sizeof(int));
    }

    printf("Enter the graph in the form of an adjacency matrix:\n");
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    // Calculate the minimum spanning weight using Prim's algorithm
    int minimumWeight = calculateMinimumWeight(graph, vertices);
    printf("Minimum Spanning Weight: %d\n", minimumWeight);

    // Cleanup
    for (int i = 0; i < vertices; i++) {
        free(graph[i]);
    }
    free(graph);

    return 0;
}


// II

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Structure to represent an edge in the graph
struct Edge {
    int src, dest, weight;
};

// Structure to represent a disjoint set for union-find operations
struct DisjointSet {
    int *parent, *rank;
    int n;
};

// Function to create a new disjoint set
struct DisjointSet* createSet(int n)
{
    struct DisjointSet* set = (struct DisjointSet*)malloc(sizeof(struct DisjointSet));
    set->parent = (int*)malloc(n * sizeof(int));
    set->rank = (int*)malloc(n * sizeof(int));
    set->n = n;

    // Initialize the parent and rank arrays
    for (int i = 0; i < n; i++) {
        set->parent[i] = i;
        set->rank[i] = 0;
    }

    return set;
}

// Function to find the set of an element (with path compression)
int findSet(struct DisjointSet* set, int i)
{
    if (i != set->parent[i])
        set->parent[i] = findSet(set, set->parent[i]);
    return set->parent[i];
}

// Function to perform union of two sets (with union by rank)
void unionSets(struct DisjointSet* set, int x, int y)
{
    int xroot = findSet(set, x);
    int yroot = findSet(set, y);

    if (set->rank[xroot] < set->rank[yroot])
        set->parent[xroot] = yroot;
    else if (set->rank[xroot] > set->rank[yroot])
        set->parent[yroot] = xroot;
    else {
        set->parent[yroot] = xroot;
        set->rank[xroot]++;
    }
}

// Function to compare two edges based on their weights (for sorting)
int compareEdges(const void* a, const void* b)
{
    struct Edge* edge1 = (struct Edge*)a;
    struct Edge* edge2 = (struct Edge*)b;
    return edge1->weight - edge2->weight;
}

// Function to find the minimum spanning tree using Kruskal's algorithm
void kruskalMST(struct Edge* edges, int numEdges, int numVertices)
{
    struct Edge* result = (struct Edge*)malloc((numVertices - 1) * sizeof(struct Edge));
    int resultIndex = 0;
    int edgeIndex = 0;

    // Sort the edges in ascending order of their weights
    qsort(edges, numEdges, sizeof(struct Edge), compareEdges);

    // Create a disjoint set for each vertex
    struct DisjointSet* set = createSet(numVertices);

    // Process edges in ascending order of weights until the minimum spanning tree is complete
    while (resultIndex < numVertices - 1 && edgeIndex < numEdges) {
        struct Edge nextEdge = edges[edgeIndex++];

        int srcSet = findSet(set, nextEdge.src);
        int destSet = findSet(set, nextEdge.dest);

        // Include the edge in the minimum spanning tree if it does not form a cycle
        if (srcSet != destSet) {
            result[resultIndex++] = nextEdge;
            unionSets(set, srcSet, destSet);
        }
    }

    // Print the minimum spanning weight
    int minimumWeight = 0;
    printf("Minimum Spanning Weight: ");
    for (int i = 0; i < numVertices - 1; i++) {
        minimumWeight += result[i].weight;
    }
    printf("%d\n", minimumWeight);

    // Cleanup
    free(result);
    free(set->parent);
    free(set->rank);
    free(set);
}

int main()
{
    int numVertices;
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &numVertices);

    int maxEdges = numVertices * (numVertices - 1) / 2;
    struct Edge* edges = (struct Edge*)malloc(maxEdges * sizeof(struct Edge));

    printf("Enter the graph in the form of an adjacency matrix:\n");
    int edgeIndex = 0;
    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            int weight;
            scanf("%d", &weight);
            if (weight != 0 && j > i) {
                edges[edgeIndex].src = i;
                edges[edgeIndex].dest = j;
                edges[edgeIndex].weight = weight;
                edgeIndex++;
            }
        }
    }

    // Calculate the minimum spanning tree using Kruskal's algorithm
    kruskalMST(edges, edgeIndex, numVertices);

    // Cleanup
    free(edges);

    return 0;
}

// III

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Structure to represent an edge in the graph
struct Edge {
    int src, dest, weight;
};

// Structure to represent a disjoint set for union-find operations
struct DisjointSet {
    int *parent, *rank;
    int n;
};

// Function to create a new disjoint set
struct DisjointSet* createSet(int n)
{
    struct DisjointSet* set = (struct DisjointSet*)malloc(sizeof(struct DisjointSet));
    set->parent = (int*)malloc(n * sizeof(int));
    set->rank = (int*)malloc(n * sizeof(int));
    set->n = n;

    // Initialize the parent and rank arrays
    for (int i = 0; i < n; i++) {
        set->parent[i] = i;
        set->rank[i] = 0;
    }

    return set;
}

// Function to find the set of an element (with path compression)
int findSet(struct DisjointSet* set, int i)
{
    if (i != set->parent[i])
        set->parent[i] = findSet(set, set->parent[i]);
    return set->parent[i];
}

// Function to perform union of two sets (with union by rank)
void unionSets(struct DisjointSet* set, int x, int y)
{
    int xroot = findSet(set, x);
    int yroot = findSet(set, y);

    if (set->rank[xroot] < set->rank[yroot])
        set->parent[xroot] = yroot;
    else if (set->rank[xroot] > set->rank[yroot])
        set->parent[yroot] = xroot;
    else {
        set->parent[yroot] = xroot;
        set->rank[xroot]++;
    }
}

// Function to compare two edges based on their weights (for sorting)
int compareEdges(const void* a, const void* b)
{
    struct Edge* edge1 = (struct Edge*)a;
    struct Edge* edge2 = (struct Edge*)b;
    return edge2->weight - edge1->weight; // Sort in descending order
}

// Function to find the maximum spanning weight using Kruskal's algorithm
void findMaximumWeight(struct Edge* edges, int numEdges, int numVertices)
{
    struct Edge* result = (struct Edge*)malloc((numVertices - 1) * sizeof(struct Edge));
    int resultIndex = 0;
    int edgeIndex = 0;

    // Sort the edges in descending order of their weights
    qsort(edges, numEdges, sizeof(struct Edge), compareEdges);

    // Create a disjoint set for each vertex
    struct DisjointSet* set = createSet(numVertices);

    // Process edges in descending order of weights until the maximum spanning tree is complete
    while (resultIndex < numVertices - 1 && edgeIndex < numEdges) {
        struct Edge nextEdge = edges[edgeIndex++];

        int srcSet = findSet(set, nextEdge.src);
        int destSet = findSet(set, nextEdge.dest);

        // Include the edge in the maximum spanning tree if it does not form a cycle
        if (srcSet != destSet) {
            result[resultIndex++] = nextEdge;
            unionSets(set, srcSet, destSet);
        }
    }

    // Print the maximum spanning weight
    int maximumWeight = 0;
    printf("Maximum Spanning Weight: ");
    for (int i = 0; i < numVertices - 1; i++) {
        maximumWeight += result[i].weight;
    }
    printf("%d\n", maximumWeight);

    // Cleanup
    free(result);
    free(set->parent);
    free(set->rank);
    free(set);
}

int main()
{
    int numVertices;
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &numVertices);

    int maxEdges = numVertices * (numVertices - 1) / 2;
    struct Edge* edges = (struct Edge*)malloc(maxEdges * sizeof(struct Edge));

    printf("Enter the graph in the form of an adjacency matrix:\n");
    int edgeIndex = 0;
    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            int weight;
            scanf("%d", &weight);
            if (weight != 0 && j > i) {
                edges[edgeIndex].src = i;
                edges[edgeIndex].dest = j;
                edges[edgeIndex].weight = weight;
                edgeIndex++;
            }
        }
    }

    // Calculate the maximum spanning weight using Kruskal's algorithm
    findMaximumWeight(edges, edgeIndex, numVertices);

    // Cleanup
    free(edges);

    return 0;
}

