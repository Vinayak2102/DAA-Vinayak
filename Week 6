//DFS

#include <bits/stdc++.h>
using namespace std;
int dfs(int node, int graph[][100], int vis[], int n, int b)
{
vis[node] = 1;
if (node == b)
{
cout << "Path exists";
return 1;
}
for (int i = 0; i < n; i++)
{
if (graph[node][i] == 1 && !vis[i])
{
if (dfs(i, graph, vis, n, b))
{
return 1;
}
}
}
return 0;
}
int main()
{
cout<<"Enter the size: ";
int n;
cin >> n;
int graph[n][100];
for (int i = 0; i < n; i++)
{
for (int j = 0; j < n; j++)
{
cin >> graph[i][j];
}
}
int a, b;
cout<<"Enter the source and destination vertex: ";
cin >> a >> b;
a = a - 1;
b = b - 1;
int vis[n] = {0};
if (!dfs(a, graph, vis, n, b))
{
cout << "Path does not exists";
}
}

//Bipartite

#include <bits/stdc++.h>
using namespace std;
bool Bipartite(int node, int col, int color[], int vis[], int graph[][100], int n)
{
vis[node] = 1;
color[node] = col;
for (int i = 0; i < n; i++)
{
if (graph[node][i] && !vis[i])
{
return Bipartite(i, !col, color, vis, graph, n);
}
else if (graph[node][i] && color[i] == color[node])
{
return false;
}
}
return true;
}
int main()
{
cout<<"Enter the size: ";
int n;
cin >> n;
int graph[n][100];
for (int i = 0; i < n; i++)
{
for (int j = 0; j < n; j++)
{
cin >> graph[i][j];
}
}
int vis[n] = {0};
int color[n];
for (int i = 0; i < n; i++)
{
color[i] = -1;
}
int col = 0;
bool temp;
for (int i = 0; i < n; i++)
{
temp = Bipartite(i, col, color, vis, graph, n);
}
if (temp)
cout << "Bipartite graph";
else
cout << "Not a Bipartite graph";
}

//cycle in a graph


#include <bits/stdc++.h>
using namespace std;
bool Is_Cycle(int node, int parent, int vis[], int graph[][100], int n)
{
vis[node] = 1;
for (int i = 0; i < n; i++)
{
if (graph[node][i] && !vis[i])
{
return Is_Cycle(i, node, vis, graph, n);
}
else if (graph[node][i] && i != parent)
{
return true;
}
}
return false;
}
int main()
{
cout<<"Enter size: ";
int n;
cin >> n;
int graph[n][100];
cout<<"Enter graph "<<endl;
for (int i = 0; i < n; i++)
{
for (int j = 0; j < n; j++)
{
cin >> graph[i][j];
}
}
int vis[n] = {0};
bool temp;
for (int i = 0; i < n; i++)
{
temp = Is_Cycle(i, i, vis, graph, n);
}
if (temp)
cout << "cycle exist";
else
cout << "cycle does not exist";
}









