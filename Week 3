/*Given an unsorted array of integers, design an algorithm and a program to sort the array using insertion sort. Your program should be able to find number of comparisons and shifts ( shifts total number of times the array elements are shifted from their place) required for sorting the array.
Input Format:
The first line contains number of test cases, T.
For each test case, there will be two input lines.
First line contains n (the size of array).
Second line contains space-separated integers describing array.
Output Format:
The output will have T number of lines.
For each test case T, there will be three output lines.
First line will give the sorted array.
Second line will give total number of comparisons.
Third line will give total number of shift operations required.
*/
#include <stdio.h>

void insertionSort(int arr[], int n, int *comparisons, int *shifts) {
    int i, j, key;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;
        while (j >= 0 && arr[j] > key) {
            (*comparisons)++;
            (*shifts)++;
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
        (*shifts)++;
    }
}

int main() {
    int t, n, i, j, comparisons, shifts;
    scanf("%d", &t);
    for (i = 0; i < t; i++) {
        scanf("%d", &n);
        int arr[n];
        for (j = 0; j < n; j++) {
            scanf("%d", &arr[j]);
        }
        comparisons = 0;
        shifts = 0;
        insertionSort(arr, n, &comparisons, &shifts);
        for (j = 0; j < n; j++) {
            printf("%d ", arr[j]);
        }
        printf("\ncomparisons=%d\nshifts=%d\n", comparisons, shifts);
    }
    return 0;
}

/*
Given an unsorted array of integers, design an algorithm and implement a program to sort this array using selection sort. Your program should also find number of comparisons and number of swaps required.
Input Format:
The first line contains number of test cases, T.
For each test case, there will be two input lines.
First line contains n (the size of array).
Second line contains space-separated integers describing array.
Output Format:
The output will have T number of lines.
For each test case T, there will be three output lines.
First line will give the sorted array.
Second line will give total number of comparisons.
Third line will give total number of swaps required.
*/

#include <stdio.h>
void selectionSort(int arr[], int n, int *comparisons, int *swaps) {
    int i, j, min_idx;
    for (i = 0; i < n - 1; i++) {
        min_idx = i;
        for (j = i + 1; j < n; j++) {
            (*comparisons)++;
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }
        if (min_idx >= i) {
            (*swaps)++;
            int temp = arr[i];
            arr[i] = arr[min_idx];
            arr[min_idx] = temp;
        }
    }
}

int main() {
    int t, n, i, j, comparisons, swaps;
    scanf("%d", &t);
    for (i = 0; i < t; i++) {
        scanf("%d", &n);
        int arr[n];
        for (j = 0; j < n; j++) {
            scanf("%d", &arr[j]);
        }
        comparisons = 0;
        swaps = 0;
        selectionSort(arr, n, &comparisons, &swaps);
        for (j = 0; j < n; j++) {
            printf("%d ", arr[j]);
        }
        printf("\nComparisons=%d\nSwaps=%d\n", comparisons, swaps);
    }
    return 0;
}


/*
Given an unsorted array of positive integers, design an algorithm and implement it using a program to find whether there are any duplicate elements in the array or not. (use sorting) (Time Complexity = O(n log n))
Input Format:
The first line contains number of test cases, T.
For each test case, there will be two input lines.
First line contains n (the size of array).
Second line contains space-separated integers describing array.
Output Format:
The output will have T number of lines.
For each test case, output will be 'YES' if duplicates are present otherwise ‘NO’.
*/
#include <stdio.h>
#include <stdlib.h>

// Function to check whether there are any duplicate elements in the sorted array
int hasDuplicates(int arr[], int n) {
    for (int i = 1; i < n; i++) {
        if (arr[i] == arr[i-1]) {
            return 1;
        }
    }
    return 0;
}

// Function to perform quicksort
void quicksort(int arr[], int low, int high) {
    if (low < high) {
        int pivot = arr[high];
        int i = low - 1;
        for (int j = low; j <= high - 1; j++) {
            if (arr[j] < pivot) {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        int temp = arr[i+1];
        arr[i+1] = arr[high];
        arr[high] = temp;
        int pi = i + 1;
        quicksort(arr, low, pi - 1);
        quicksort(arr, pi + 1, high);
    }
}

// Function to sort the array and check for duplicates
char* checkDuplicates(int arr[], int n) {
    quicksort(arr, 0, n-1);
    if (hasDuplicates(arr, n)) {
        return "YES";
    }
    else {
        return "NO";
    }
}

int main() {
    int t;
    scanf("%d", &t);
    while (t--) {
        int n;
        scanf("%d", &n);
        int arr[n];
        for (int i = 0; i < n; i++) {
            scanf("%d", &arr[i]);
        }
        char* result = checkDuplicates(arr, n);
        printf("%s\n", result);
    }
    return 0;
}




